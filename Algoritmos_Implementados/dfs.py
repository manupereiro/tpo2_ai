# dfs.py
# B칰squeda en Profundidad (Depth-First Search)
# Implementaci칩n para el Trabajo Pr치ctico 2 - IA

import sys
import os
# Agregar la carpeta padre al path para poder importar util
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from util import Stack
except ImportError:
    print("丘멆잺  Para ejecutar este archivo individualmente, necesitas estar en la carpeta 'Codigo Fuente'")
    print("游눠 Usa: cd .. && python Algoritmos_Implementados/dfs.py")
    print("游꿡 O mejor a칰n, ejecuta los algoritmos en Pacman:")
    print("   python pacman.py -l tinyMaze -p SearchAgent -a fn=dfs")
    sys.exit(1)

def depth_first_search(problem):
    """
    B칰squeda en Profundidad (DFS)
    
    Explora el 치rbol de b칰squeda en profundidad, yendo tan profundo como sea posible
    antes de retroceder. Utiliza una pila (LIFO) para mantener los nodos por explorar.
    
    Caracter칤sticas:
    - No garantiza encontrar la soluci칩n 칩ptima
    - Puede quedar atrapado en bucles infinitos si no se controlan los estados visitados
    - Requiere menos memoria que BFS en 치rboles muy anchos
    - Complejidad temporal: O(b^m) donde b es el factor de ramificaci칩n y m la profundidad m치xima
    - Complejidad espacial: O(bm)
    
    Args:
        problem: Objeto que implementa la interfaz SearchProblem
    
    Returns:
        list: Lista de acciones que lleva del estado inicial al objetivo
    """
    
    # Usar una pila (Stack) para DFS - Last In, First Out
    stack = Stack()
    
    # Inicializar la pila con el estado inicial
    # Cada elemento de la pila es una tupla (estado, lista_de_acciones)
    start_state = problem.getStartState()
    stack.push((start_state, []))
    
    # Conjunto para llevar registro de estados visitados (evita ciclos)
    visited = set()
    
    # Bucle principal del algoritmo
    while not stack.isEmpty():
        # Obtener el pr칩ximo estado a explorar (el m치s reciente agregado)
        current_state, actions = stack.pop()
        
        # Si ya visitamos este estado, continuamos con el siguiente
        if current_state in visited:
            continue
            
        # Marcar el estado actual como visitado
        visited.add(current_state)
        
        # Verificar si hemos llegado al objetivo
        if problem.isGoalState(current_state):
            return actions
            
        # Expandir el estado actual obteniendo todos sus sucesores
        for successor, action, step_cost in problem.getSuccessors(current_state):
            # Solo agregar sucesores no visitados
            if successor not in visited:
                new_actions = actions + [action]
                stack.push((successor, new_actions))
    
    # Si no se encuentra soluci칩n, retornar lista vac칤a
    return []

def ejemplo_uso():
    """
    Ejemplo de c칩mo usar el algoritmo DFS en Pacman
    """
    print("=== B칰squeda en Profundidad (DFS) ===")
    print("Comando para ejecutar en Pacman:")
    print("python pacman.py -l tinyMaze -p SearchAgent -a fn=dfs")
    print("\nCaracter칤sticas del DFS:")
    print("- Explora en profundidad primero")
    print("- No garantiza soluci칩n 칩ptima")
    print("- Usa menos memoria que BFS")
    print("- Puede ser m치s r치pido en algunos casos")
    print("\n" + "="*50)
    print("游늸 UBICACI칍N: Algoritmos_Implementados/dfs.py")
    print("游꿡 FUNCIONAL: ../search.py (l칤neas 75-110)")
    print("="*50)

if __name__ == "__main__":
    ejemplo_uso() 