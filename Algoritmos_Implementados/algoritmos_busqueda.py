# algoritmos_busqueda.py
# Demostraci√≥n de los algoritmos de b√∫squeda implementados
# Trabajo Pr√°ctico 2 - Inteligencia Artificial

import os
import sys

def mostrar_menu():
    """
    Muestra el men√∫ principal con las opciones de algoritmos
    """
    print("=" * 60)
    print("   ALGORITMOS DE B√öSQUEDA - PACMAN")
    print("   Trabajo Pr√°ctico 2 - Inteligencia Artificial")
    print("=" * 60)
    print()
    print("Algoritmos implementados:")
    print("1. DFS - B√∫squeda en Profundidad (Depth-First Search)")
    print("2. BFS - B√∫squeda en Anchura (Breadth-First Search)")
    print("3. UCS - B√∫squeda de Costo Uniforme (Uniform Cost Search)")
    print("4. A*  - B√∫squeda A* (A-Star Search)")
    print("5. Ejecutar todas las pruebas")
    print("6. Salir")
    print()

def ejecutar_algoritmo(opcion):
    """
    Ejecuta el algoritmo seleccionado en diferentes laberintos
    """
    # Cambiar al directorio padre para ejecutar pacman
    os.chdir("..")
    
    comandos = {
        "1": [
            ("DFS en TinyMaze", "python pacman.py -l tinyMaze -p SearchAgent -a fn=dfs"),
            ("DFS en MediumMaze", "python pacman.py -l mediumMaze -p SearchAgent -a fn=dfs")
        ],
        "2": [
            ("BFS en TinyMaze", "python pacman.py -l tinyMaze -p SearchAgent -a fn=bfs"),
            ("BFS en MediumMaze", "python pacman.py -l mediumMaze -p SearchAgent -a fn=bfs"),
            ("BFS en BigMaze", "python pacman.py -l bigMaze -z 0.5 -p SearchAgent -a fn=bfs")
        ],
        "3": [
            ("UCS en MediumMaze", "python pacman.py -l mediumMaze -p SearchAgent -a fn=ucs"),
            ("UCS en BigMaze", "python pacman.py -l bigMaze -z 0.5 -p SearchAgent -a fn=ucs")
        ],
        "4": [
            ("A* en BigMaze con Manhattan", "python pacman.py -l bigMaze -z 0.5 -p SearchAgent -a \"fn=astar,heuristic=manhattanHeuristic\""),
            ("A* en MediumMaze", "python pacman.py -l mediumMaze -p SearchAgent -a \"fn=astar,heuristic=manhattanHeuristic\"")
        ]
    }
    
    if opcion in comandos:
        for descripcion, comando in comandos[opcion]:
            print(f"\n--- {descripcion} ---")
            print(f"Comando: {comando}")
            print("üìÇ Ejecut√°ndose desde: Codigo Fuente/")
            input("Presiona Enter para ejecutar...")
            os.system(comando)
            input("Presiona Enter para continuar...")
    
    # Volver al directorio de algoritmos
    os.chdir("Algoritmos_Implementados")

def mostrar_teoria_algoritmos():
    """
    Muestra la teor√≠a detr√°s de cada algoritmo
    """
    print("\n" + "=" * 60)
    print("   TEOR√çA DE LOS ALGORITMOS DE B√öSQUEDA")
    print("=" * 60)
    
    print("\n1. DFS (Depth-First Search) - B√∫squeda en Profundidad:")
    print("   ‚Ä¢ Explora tan profundo como sea posible antes de retroceder")
    print("   ‚Ä¢ Usa una PILA (LIFO - Last In, First Out)")
    print("   ‚Ä¢ No garantiza la soluci√≥n √≥ptima")
    print("   ‚Ä¢ Complejidad temporal: O(b^m)")
    print("   ‚Ä¢ Complejidad espacial: O(bm)")
    print("   ‚Ä¢ Mejor para: Problemas con soluciones profundas")
    
    print("\n2. BFS (Breadth-First Search) - B√∫squeda en Anchura:")
    print("   ‚Ä¢ Explora nivel por nivel")
    print("   ‚Ä¢ Usa una COLA (FIFO - First In, First Out)")
    print("   ‚Ä¢ Garantiza la soluci√≥n √≥ptima (costos uniformes)")
    print("   ‚Ä¢ Complejidad temporal: O(b^d)")
    print("   ‚Ä¢ Complejidad espacial: O(b^d)")
    print("   ‚Ä¢ Mejor para: Encontrar caminos m√°s cortos")
    
    print("\n3. UCS (Uniform Cost Search) - B√∫squeda de Costo Uniforme:")
    print("   ‚Ä¢ Explora el nodo con menor costo acumulado")
    print("   ‚Ä¢ Usa una COLA DE PRIORIDAD ordenada por costo")
    print("   ‚Ä¢ Garantiza la soluci√≥n √≥ptima")
    print("   ‚Ä¢ Generalizaci√≥n de BFS para costos variables")
    print("   ‚Ä¢ Mejor para: Problemas con costos de acciones diferentes")
    
    print("\n4. A* (A-Star Search) - B√∫squeda A*:")
    print("   ‚Ä¢ Combina costo real + estimaci√≥n heur√≠stica")
    print("   ‚Ä¢ Usa una COLA DE PRIORIDAD ordenada por f(n) = g(n) + h(n)")
    print("   ‚Ä¢ g(n): costo real, h(n): heur√≠stica")
    print("   ‚Ä¢ Garantiza soluci√≥n √≥ptima (heur√≠stica admisible)")
    print("   ‚Ä¢ M√°s eficiente que UCS con buena heur√≠stica")
    print("   ‚Ä¢ Mejor para: B√∫squedas dirigidas hacia un objetivo conocido")

def ejecutar_todas_pruebas():
    """
    Ejecuta una secuencia de pruebas para comparar todos los algoritmos
    """
    print("\n--- EJECUTANDO TODAS LAS PRUEBAS ---")
    
    # Cambiar al directorio padre
    os.chdir("..")
    
    pruebas = [
        ("DFS en TinyMaze", "python pacman.py -l tinyMaze -p SearchAgent -a fn=dfs"),
        ("BFS en TinyMaze", "python pacman.py -l tinyMaze -p SearchAgent -a fn=bfs"),
        ("UCS en TinyMaze", "python pacman.py -l tinyMaze -p SearchAgent -a fn=ucs"),
        ("A* en TinyMaze", "python pacman.py -l tinyMaze -p SearchAgent -a \"fn=astar,heuristic=manhattanHeuristic\""),
        ("BFS en MediumMaze", "python pacman.py -l mediumMaze -p SearchAgent -a fn=bfs"),
        ("UCS en MediumMaze", "python pacman.py -l mediumMaze -p SearchAgent -a fn=ucs"),
        ("A* en MediumMaze", "python pacman.py -l mediumMaze -p SearchAgent -a \"fn=astar,heuristic=manhattanHeuristic\"")
    ]
    
    for descripcion, comando in pruebas:
        print(f"\n--- {descripcion} ---")
        print(f"Comando: {comando}")
        input("Presiona Enter para ejecutar...")
        os.system(comando)
    
    # Volver al directorio de algoritmos
    os.chdir("Algoritmos_Implementados")

def main():
    """
    Funci√≥n principal del programa
    """
    print("üìÇ Ejecut√°ndose desde: Algoritmos_Implementados/")
    print("üéÆ Juego Pacman en: ../")
    print("üìç Implementaci√≥n principal: ../search.py")
    print()
    
    while True:
        mostrar_menu()
        
        opcion = input("Selecciona una opci√≥n (1-6): ").strip()
        
        if opcion == "6":
            print("¬°Gracias por usar el sistema de algoritmos de b√∫squeda!")
            break
        elif opcion == "5":
            ejecutar_todas_pruebas()
        elif opcion in ["1", "2", "3", "4"]:
            ejecutar_algoritmo(opcion)
        elif opcion.lower() == "teoria":
            mostrar_teoria_algoritmos()
        else:
            print("Opci√≥n no v√°lida. Intenta de nuevo.")
        
        input("\nPresiona Enter para volver al men√∫ principal...")

if __name__ == "__main__":
    print("üß† Iniciando sistema de demostraci√≥n de algoritmos de b√∫squeda...")
    print("üí° Tip: Puedes escribir 'teoria' en cualquier momento para ver la explicaci√≥n te√≥rica")
    print()
    main() 